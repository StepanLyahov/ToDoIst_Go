// Package web provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package web

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	Description string `json:"description"`
	Title       string `json:"title"`
}

// Error defines model for Error.
type Error struct {
	Details string `json:"details"`
	Slug    string `json:"slug"`
}

// GroupResponse defines model for GroupResponse.
type GroupResponse struct {
	Description *string   `json:"description,omitempty"`
	Id          *string   `json:"id,omitempty"`
	TaskIDs     *[]string `json:"taskIDs,omitempty"`
	Title       *string   `json:"title,omitempty"`
}

// Task defines model for Task.
type Task struct {
	CreateDate       *string `json:"createDate,omitempty"`
	CurrentDoingDate *string `json:"currentDoingDate,omitempty"`
	Description      *string `json:"description,omitempty"`
	EndDate          *string `json:"endDate,omitempty"`
	Id               *string `json:"id,omitempty"`
	Priority         *int    `json:"priority,omitempty"`
	Title            *string `json:"title,omitempty"`
}

// CreateGroupJSONBody defines parameters for CreateGroup.
type CreateGroupJSONBody CreateGroupRequest

// AddTaskInGroupJSONBody defines parameters for AddTaskInGroup.
type AddTaskInGroupJSONBody Task

// ChangeTaskJSONBody defines parameters for ChangeTask.
type ChangeTaskJSONBody Task

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody CreateGroupJSONBody

// AddTaskInGroupJSONRequestBody defines body for AddTaskInGroup for application/json ContentType.
type AddTaskInGroupJSONRequestBody AddTaskInGroupJSONBody

// ChangeTaskJSONRequestBody defines body for ChangeTask for application/json ContentType.
type ChangeTaskJSONRequestBody ChangeTaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /group/create)
	CreateGroup(w http.ResponseWriter, r *http.Request)

	// (GET /group/{groupId})
	GetGroup(w http.ResponseWriter, r *http.Request, groupId string)

	// (POST /group/{groupId}/addTask)
	AddTaskInGroup(w http.ResponseWriter, r *http.Request, groupId string)

	// (POST /task/change)
	ChangeTask(w http.ResponseWriter, r *http.Request)

	// (GET /task/{taskID})
	GetTaskById(w http.ResponseWriter, r *http.Request, taskID string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateGroup operation middleware
func (siw *ServerInterfaceWrapper) CreateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateGroup(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetGroup operation middleware
func (siw *ServerInterfaceWrapper) GetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetGroup(w, r, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddTaskInGroup operation middleware
func (siw *ServerInterfaceWrapper) AddTaskInGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter groupId: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTaskInGroup(w, r, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ChangeTask operation middleware
func (siw *ServerInterfaceWrapper) ChangeTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangeTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTaskById operation middleware
func (siw *ServerInterfaceWrapper) GetTaskById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskID" -------------
	var taskID string

	err = runtime.BindStyledParameter("simple", false, "taskID", chi.URLParam(r, "taskID"), &taskID)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter taskID: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskById(w, r, taskID)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/group/create", wrapper.CreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/group/{groupId}", wrapper.GetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/group/{groupId}/addTask", wrapper.AddTaskInGroup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/task/change", wrapper.ChangeTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/task/{taskID}", wrapper.GetTaskById)
	})

	return r
}
